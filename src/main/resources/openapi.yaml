openapi: 3.0.0
info:
  title: Controller API
  version: 1.0.0
servers:
  - url: http://localhost:8080
paths:
  /users:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInputDTO'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOutputDTO'
      tags:
        - Users
    get:
      summary: Get all users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserOutputDTO'
      tags:
        - Users
  /users/{userId}:
    get:
      summary: Get user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOutputDTO'
      tags:
        - Users
    put:
      summary: Update user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserChangeDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOutputDTO'
      tags:
        - Users
    delete:
      summary: Delete user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
      tags:
        - Users
  /users/login:
    get:
      summary: Get user by login
      parameters:
        - name: login
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOutputDTO'
      tags:
        - Users
  /users/remittance/{senderId}/{recipientId}:
    post:
      summary: Remittance money from one user to another
      parameters:
        - name: senderId
          in: path
          required: true
          schema:
            type: integer
        - name: recipientId
          in: path
          required: true
          schema:
            type: integer
        - name: amount
          in: query
          required: true
          schema:
            type: number
            format: float
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOutputDTO'
      tags:
        - Users
  /users/{userId}/{contact}:
    delete:
      summary: Delete a contact for a specific user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the user to delete contact for
        - name: contact
          in: path
          required: true
          schema:
            type: string
          description: Type of contact to delete (e.g., email, phone)
      responses:
        '200':
          description: Contact deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOutputDTO'
        '404':
          description: User or contact not found
        '500':
          description: Internal server error
      tags:
        - Users
  /users/search:
    get:
      summary: Search users with filters and sorting
      parameters:
        - name: birthDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: phone
          in: query
          required: false
          schema:
            type: string
        - name: lastName
          in: query
          required: false
          schema:
            type: string
        - name: email
          in: query
          required: false
          schema:
            type: string
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: size
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: List of users matching the search criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Bad request, invalid parameters provided
      tags:
        - Users
  /accounts:
    post:
      summary: Create an account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountInputDTO'
      responses:
        '201':
          description: Account created successfully
      tags:
        - Accounts

    get:
      summary: Get all accounts
      responses:
        '200':
          description: List of all accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountOutputDTO'
      tags:
        - Accounts

  /accounts/{accountId}:
    get:
      summary: Get account by ID
      parameters:
        - name: accountId
          in: path
          description: ID of the account to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Account found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountOutputDTO'
        '404':
          description: Account not found
      tags:
        - Accounts

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        birthDate:
          type: string
          format: date-time
    UserInputDTO:
      type: object
      properties:
        login:
          type: string
          maxLength: 20
          minLength: 1
        email:
          type: string
          format: email
          maxLength: 50
          minLength: 1
        phone:
          type: string
          maxLength: 12
          minLength: 1
        birthDate:
          type: string
          format: date-time
        firstName:
          type: string
          maxLength: 50
          minLength: 1
        middleName:
          type: string
          maxLength: 50
          minLength: 1
        lastName:
          type: string
          maxLength: 50
          minLength: 1
        initialBalance:
          type: number
          minimum: 0
        password:
          type: string
          maxLength: 32
          minLength: 1

    UserChangeDTO:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 50
        phone:
          type: string
          maxLength: 12

    UserOutputDTO:
      type: object
      properties:
        id:
          type: integer
        login:
          type: string
          maxLength: 20
        email:
          type: string
          format: email
          maxLength: 50
        phone:
          type: string
          maxLength: 12
        account:
          $ref: '#/components/schemas/AccountOutputDTO'

    AccountInputDTO:
      type: object
      properties:
        balance:
          type: number
          format: double
          minimum: 0
      required:
        - balance

    AccountOutputDTO:
      type: object
      properties:
        id:
          type: integer
        balance:
          type: number
          format: double
          minimum: 0
        initialBalance:
          type: number
          format: double
          minimum: 0

tags:
  - name: Accounts
    description: Operations related to accounts